---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: rook-ceph-cluster
  namespace: rook-ceph
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: rook-ceph-cluster
      version: v1.11.7
      sourceRef:
        kind: HelmRepository
        name: rook-ceph
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    cephClusterSpec:
      cephVersion:
        image: quay.io/ceph/ceph:v17.2.6
        allowUnsupported: false
      dataDirHostPath: /var/lib/rook
      skipUpgradeChecks: false

      continueUpgradeAfterChecksEvenIfNotHealthy: false

      waitTimeoutForHealthyOSDInMinutes: 10
      # monitors
      mon:
        count: 3
        allowMultiplePerNode: false
      mgr:
        # When higher availability of the mgr is needed, increase the count to 2.
        # In that case, one mgr will be active and one in standby. When Ceph updates which
        # mgr is active, Rook will update the mgr services to match the active mgr.
        count: 2
        allowMultiplePerNode: false
        modules:
          - name: pg_autoscaler
            enabled: true
      dashboard:
        enabled: true
      network:
        connections:
          encryption:
            enabled: true
          compression:
            enabled: true
          requireMsgr2: true
      crashCollector:
        disable: false
        # daysToRetain: 30
      # enable log collector, daemons will log on files and rotate
      logCollector:
        enabled: true
        periodicity: daily # one of: hourly, daily, weekly, monthly
        maxLogSize: 500M # SUFFIX may be 'M' or 'G'. Must be at least 1M.
      # automate [data cleanup process](https://github.com/rook/rook/blob/master/Documentation/Storage-Configuration/ceph-teardown.md#delete-the-data-on-hosts) in cluster destruction.
      cleanupPolicy:
        # To destroy all Rook data on hosts during uninstall, confirmation must be set to "yes-really-destroy-data".
        # Rook will immediately stop configuring the cluster and only wait for the delete command.
        confirmation: "yes-really-destroy-data"
        # sanitizeDisks represents settings for sanitizing OSD disks on cluster deletion
        sanitizeDisks:
          # possible choices are 'complete' or 'quick' (default)
          method: quick
          # possible choices are 'zero' (default) or 'random'
          dataSource: zero
          # iteration: 1
        # If set to true, cephCluster deletion does not wait for the PVs to be deleted.
        allowUninstallWithVolumes: false
      # placement:
      #   all:
      #     nodeAffinity:
      #       requiredDuringSchedulingIgnoredDuringExecution:
      #         nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: role
      #             operator: In
      #             values:
      #             - storage-node
      #     podAffinity:
      #     podAntiAffinity:
      #     topologySpreadConstraints:
      #     tolerations:
      #     - key: storage-node
      #       operator: Exists
      # The above placement information can also be specified for mon, osd, and mgr components
      #   mon:
      #   osd:
      #    prepareosd:
      #    mgr:
      #    cleanup:
      annotations:
      #   all:
      #   mon:
      #   osd:
      #   cleanup:
      #   prepareosd:
      # clusterMetadata annotations will be applied to only `rook-ceph-mon-endpoints` configmap and the `rook-ceph-mon` and `rook-ceph-admin-keyring` secrets.
      # And clusterMetadata annotations will not be merged with `all` annotations.
      #    clusterMetadata:
      #       kubed.appscode.com/sync: "true"
      # If no mgr annotations are set, prometheus scrape annotations will be set by default.
      #   mgr:
      labels:
      #   all:
      #   mon:
      #   osd:
      #   cleanup:
      #   mgr:
      #   prepareosd:
      # monitoring is a list of key-value pairs. It is injected into all the monitoring resources created by operator.
      # These labels can be passed as LabelSelector to Prometheus
      #   monitoring:
      #   crashcollector:
      resources:
        mgr:
          limits:
            cpu: "500m"
            memory: "1024Mi"
          requests:
            cpu: "500m"
            memory: "1024Mi"
      # The above example requests/limits can also be added to the other components
      #   mon:
      #   osd:
      # For OSD it also is a possible to specify requests/limits based on device class
      #   osd-hdd:
      #   osd-ssd:
      #   osd-nvme:
      #   prepareosd:
      #   mgr-sidecar:
      #   crashcollector:
      #   logcollector:
      #   cleanup:
      #   exporter:
      # The option to automatically remove OSDs that are out and are safe to destroy.
      removeOSDsIfOutAndSafeToRemove: true
      priorityClassNames:
        # all: rook-ceph-default-priority-class
        mon: system-node-critical
        osd: system-node-critical
        mgr: system-cluster-critical
        # crashcollector: rook-ceph-crashcollector-priority-class
      storage: # cluster level storage configuration and selection
        useAllNodes: true
        useAllDevices: true
        # deviceFilter:
        config:
          # crushRoot: "custom-root" # specify a non-default root label for the CRUSH map
          # metadataDevice: "md0" # specify a non-rotational storage so ceph-volume will use it as block db device of bluestore.
          # databaseSizeMB: "1024" # uncomment if the disks are smaller than 100 GB
          osdsPerDevice: "5" # this value can be overridden at the node or device level
          encryptedDevice: "true" # the default value for this option is "false"
        # Individual nodes and their config can be specified as well, but 'useAllNodes' above must be set to false. Then, only the named
        # nodes below will be used as storage resources.  Each node's 'name' field should match their 'kubernetes.io/hostname' label.
        # nodes:
        #   - name: "172.17.4.201"
        #     devices: # specific devices to use for storage can be specified for each node
        #       - name: "sdb"
        #       - name: "nvme01" # multiple osds can be created on high performance devices
        #         config:
        #           osdsPerDevice: "5"
        #       - name: "/dev/disk/by-id/ata-ST4000DM004-XXXX" # devices can be specified using full udev paths
        #     config: # configuration can be specified at the node level which overrides the cluster level config
        #   - name: "172.17.4.301"
        #     deviceFilter: "^sd."
        # when onlyApplyOSDPlacement is false, will merge both placement.All() and placement.osd
        onlyApplyOSDPlacement: false
      # The section for configuring management of daemon disruptions during upgrade or fencing.
      disruptionManagement:
        managePodBudgets: true
        # A duration in minutes that determines how long an entire failureDomain like `region/zone/host` will be held in `noout` (in addition to the
        # default DOWN/OUT interval) when it is draining. This is only relevant when  `managePodBudgets` is `true`. The default value is `30` minutes.
        osdMaintenanceTimeout: 30
        # A duration in minutes that the operator will wait for the placement groups to become healthy (active+clean) after a drain was completed and OSDs came back up.
        # Operator will continue with the next drain if the timeout exceeds. It only works if `managePodBudgets` is `true`.
        # No values or 0 means that the operator will wait until the placement groups are healthy before unblocking the next drain.
        pgHealthCheckTimeout: 0

      healthCheck:
        daemonHealth:
          mon:
            disabled: false
            interval: 45s
          osd:
            disabled: false
            interval: 60s
          status:
            disabled: false
            interval: 60s
        livenessProbe:
          mon:
            disabled: false
          mgr:
            disabled: false
          osd:
            disabled: false
        startupProbe:
          mon:
            disabled: false
          mgr:
            disabled: false
          osd:
            disabled: false
      cephBlockPools:
        - name: ceph-blockpool-01
          spec:
            failureDomain: host
            replicated:
              size: 3
            targetSizeRatio: 0.2
          storageClass:
            enabled: true
            name: ceph-block
            isDefault: true
            reclaimPolicy: Delete
            allowVolumeExpansion: true
            parameters:
              imageFormat: "2"
              imageFeatures: layering,fast-diff,object-map,deep-flatten,exclusive-lock
              csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner
              csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
              csi.storage.k8s.io/controller-expand-secret-name: rook-csi-rbd-provisioner
              csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
              csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node
              csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
              csi.storage.k8s.io/fstype: ext4
      cephFileSystems:
        - name: ceph-filesystem
          spec:
            metadataPool:
              replicated:
                size: 3
            dataPools:
              - failureDomain: host
                replicated:
                  size: 3
                name: data0
                targetSizeRatio: 0.2
            metadataServer:
              activeCount: 1
              activeStandby: true
              resources:
                requests:
                  cpu: 1000m
                  memory: 4Gi
                limits:
                  memory: 4Gi
          storageClass:
            enabled: true
            isDefault: false
            name: ceph-filesystem
            pool: data0
            reclaimPolicy: Delete
            allowVolumeExpansion: true
            parameters:
              csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner
              csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
              csi.storage.k8s.io/controller-expand-secret-name: rook-csi-cephfs-provisioner
              csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
              csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node
              csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
              csi.storage.k8s.io/fstype: ext4
      cephObjectStores:
        - name: ceph-objectstore
          spec:
            metadataPool:
              failureDomain: host
              replicated:
                size: 3
            dataPool:
              failureDomain: host
              erasureCoded:
                dataChunks: 2
                codingChunks: 1
            preservePoolsOnDelete: true
            gateway:
              port: 80
              resources:
                requests:
                  cpu: 1000m
                  memory: 1Gi
                limits:
                  memory: 2Gi
              instances: 2
            healthCheck:
              bucket:
                interval: 60s
          storageClass:
            enabled: true
            name: ceph-bucket
            reclaimPolicy: Delete
            parameters:
              region: 89t-01
